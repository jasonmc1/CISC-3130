  import java.util.Scanner;
  import java.util.LinkedList;
  import java.io.PrintWriter;
  import java.io.File;
  import java.util.Collections;
/* contains the read method procedures and prints to file */
 class Artist {
    //instantiates limited array, with 10 elements being up to change
    public Artist(String name, String[] line){
        this.name = name;
        line = new String[]{"", "", "", "", "", "", "", "", "", ""};
        
    }
    
    public Artist(){
        name = "";
        line = new String[]{"", "", "", "", "", "", "", "", "", ""};
    }
    
    public boolean isEqual(Artist other){
        return name.equals(other.name);
    }
    
    //returns name of a line if needed by itself
    public String getName(){
        return name;
    }
    
    //returns list with names
    public LinkedList<String> getList(){
        return obj;
    }
   
    //reads each line of csv file, then puts it in a string with spaces instead of commas
    //for use if execs want data besides names in the future
    public static Artist read(Scanner scanner) {
        if (!scanner.hasNext()) return null;
        String[] arr = scanner.next().split(",");
        String temp = "";
        int count = 0;
        int r = 0;
        for(String a: arr){
            //if statement collects name, assuming it comes after the first word and comma
            if(count == 1){name.equals(a);}
            else{
                temp += (a+ " ");
            }
            count++;
        }
        line[r] = temp;
        r++;
        return new Artist(name, line);
    }
    
    private static String name;   
    private static String[] line = new String[10];
    String[] names = new String[10];
    static LinkedList<String> obj = new LinkedList<String>();
    
    public static void main(String[] args) throws Exception{
       PrintWriter artistSort = new PrintWriter("placeholderFile.txt");
       Scanner scanner = new Scanner(new File("regional-global-weekly-2020-01-17--2020-01-24 (1).csv"));
       Artist artist = read(scanner);
       //this reads in lines through read method, then gets name from getName which goes in the linkedlist
       while(artist != null){
           obj.add(artist.getName());
           artist = read(scanner);
       }
       //sorts the list alphabetically, then prints to a file
       Collections.sort(obj);
       for(String x: obj){
           artistSort.println(x);
       }
       artistSort.close();
       //removes any duplicate elements in linkedlist
       for(int i = 0; i < obj.size(); i++){
           if(i>0 && i <obj.size()){
               if(obj.get(i).equals(obj.get(i-1))){
                   obj.remove(obj.get(i));
                }
            }
       }
       }
 }

//this class prompts the user to interact with the names of artists if needed
 
 class TopStreamingArtists {
    public static void main(String [ ] args) {
        //copies over linkedlist from previous class
        Artist artistNames = new Artist();
        Linkedlist<String> obj2 = new LinkedList<String>();
        obj2 = (LinkedList)(artistNames.getList()).clone();
        Scanner x = new Scanner(System.in);
        String resp = x.next();
        //while loop allows user to add names, display list, or quit
        while(!resp.equals("quit")){
        System.out.println("Would you like to add a name, display list, or quit? (add/display/quit)");
            if(resp.equals("insert")){
                System.out.println("type in the name");
                String temp = x.next();
                artistNames.insert(temp);
            }
            else if(resp.equals("display")){
                artistNames.displayList();
            }
        System.out.println("Would you like to add a name, display list, or quit? (add/display/quit)");
        resp = x.next();
    }
    }
}
